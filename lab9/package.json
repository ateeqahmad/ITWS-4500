{
  "name": "tw33t_t1ck3r",
  "version": "1.0.2",
  "description": "A very basic tweet ticker that pulls tweets using the stream API and stores them in a Mongo database, and allows exporting JSON / CSV data from the Mongo stored tweets.",
  "main": "server.js",
  "dependencies": {
    "angular": "^1.3.14",
    "express": "^4.12.2",
    "mongodb": "^2.0.27",
    "multer": "^0.1.8",
    "ncp": "^2.0.0",
    "twitter": "^1.2.3"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js",
    "install": "node move_it.js",
    "postinstall": "node remove_it.js"
  },
  "keywords": [
    "tw33t",
    "twitter",
    "ticker",
    "t1cker"
  ],
  "author": {
    "name": "Mason Cooper",
    "email": "mason@mcooper.tk",
    "url": "http://www.mcooper.tk"
  },
  "license": "ISC",
  "repository": {
    "type": "git",
    "url": "https://github.com/npm/npm.git"
  },
  "readme": "#tw33t_t1cker\r\n\r\n##Usage\r\nFirst, ensure an instance of mongoDB is running.\r\n\r\nAfter that run:\r\n  npm install\r\n\r\nTo install all of the node modules. Alternatively, the applications is published on npm and can be fully installed by navigating to an empty directory and running:\r\n  npm install tw33t_t1ck3r\r\n\r\nThen run (after ensuring mongodb is running):\r\n  npm start\r\n\r\nAfter that visit 'localhost:3000' to see it up and running.\r\n\r\nThe landing page will allow you to choose between conversions and tweet ticking.\r\n\r\n##Installer \r\nSetting up the installer was a bit complicated. Wanting to use NPM, I didn't realize it so eagerly forces you to install to a node_modules folder if you download from the package manager.\r\n\r\nTo get a around that I did something a bit hackish, and allow npm to do its thing before copying my source to the root of the app and then removing my source. See the move_it and remove_it js files for exactly how I did that. The two scripts are hooked in using npm scripts install and postinstall, both of which are actually called after install. I separated them due to async handling errors that were fixed by the ordered calls npm makes upon installing.\r\n\r\n##Landing page\r\nThe landing page remains quite simply. My art is actually courtesy of RPISEC. As I'm going with the name \"tw33t_t1ck3r\" I decided I wanted a clean hacker-ish feel, keeping the white theme of my subpages and adding the dark theme of my landing page for contrast between contexts.\r\n\r\n##Fields and Buttons\r\nIn the various applications you'll find the buttons asked for (all from previous labs). The tweet ticker has a settings icon in the top left corner that will give you access to its forms, while the csv converter is just the input needed!\r\n\r\n##Mongo to JSON to CSV\r\nTo convert mongo to JSON, export the data in the tweet ticker. Then navigate to the converter to convert that data to csv.\r\n\r\n##Tweet Refreshing\r\nAs handled in the previous lab, you can specify a query to search and access new tweets by filling out the Pull Data form and clicking Pull Data. You can then quickly click Export, as the form for the file name will autofill basd on your input in the Pull Data form.\r\n\r\n##Responsiveness\r\nThe site is responsive mainly thanks to CSS, with a little credit going to jquery-mobile for handling its own issues well enough. Percents and media queries were used to ensure a positive experience.\r\n\r\n##Branding\r\nMy branding is simple, clean, l33t feel as exhibited by the landing page and tied together by the clean/meaningful design.",
  "readmeFilename": "readme.md",
  "gitHead": "fa72bdc07d3f26db62ed417e2a0374f88bccdbcc",
  "bugs": {
    "url": "https://github.com/npm/npm/issues"
  },
  "homepage": "https://github.com/npm/npm",
  "_id": "tw33t_t1ck3r@1.0.2",
  "_shasum": "24183afc93ad728e0c67bfdeeba82e04d763a01f",
  "_from": "tw33t_t1ck3r@*"
}
